<h1 id="title" class="lightspaced">How Are You Feeling?</h1>
<h1 id="action" class="lightspaced" style="opacity: 0;">Sending...</h1>
<div class="container">
    <div id="hints">&nbsp;</div>
    <div id="formContainer">
        <form>
            <input type="text" id="name" placeholder="(Your name)">
            <input type="text" id="feel" placeholder="I'm feeling...">
            <input type="text" id="emoji" placeholder="Emoji" maxlength="2">
            <input type="hidden" id="user">
            <input type="hidden" id="pass">
        </form>
    </div>
</div>
<div class="container response">
    <div id="response" style="opacity: 0;">&nbsp;</div>
</div>
<div id="auth" style="display: none;" class="closeableContainer"><a class="closeable" href="/auth/spotify">Authorize Spotify</a></div>
<div id="music" style="display: none;" class="closeableContainer"></div>

<script type="application/javascript">
    $(function (){
        let out = $("#response"),
            hints=$("#hints"),
            title=$("#title"),
            action=$("#action"),
            auth=$("#auth"),
            music=$("#music"),
            authd={{{authd}}},
            spotifyBtn={{{spotifyBtnEnabled}}},
            currentMusic={{{currentMusic}}},
            error={{{error}}},
            musicImgUrl={{{musicImgUrl}}},
            trackInfoUpdateNum = 0,
            numTrackUpdates = 0;

        function zoomOutMobile() {
            var viewport = document.querySelector('meta[name="viewport"]');

            if ( viewport ) {
                viewport.content = "initial-scale=0.1";
                // viewport.content = "width=1200";
            }
        }

        function message(msg) {
            let style = "line-height: 36px; opacity: 1;";
            if (msg === "FAIL" || msg === "ERROR") {
                style += "color: #d50000;";
            }
            out.attr("style", style);
            out.text(msg);
        }

        function  loading() {
            out.attr("style", "opacity: 1;");
            const text = out.text() + "."
            out.text(text)
        }

        function clear() {
            out.attr("style", "opacity: 0;");
            out.html("&nbsp;")
        }

        function updateTrackData(callback) {
            $.ajax({
                url: "/getTrackData"
            }).done(function(trackData) {
                console.log("Update trackData");
                console.log(numTrackUpdates);
                console.log(trackData);

                if (spotifyBtn === true) {
                    return;
                }

                if (!$.isEmptyObject(trackData)) {
                    var img = music.find("img");
                    img.attr("src", `${trackData.image.url}`)
                    music.find("h3").text(`${trackData.name} by ${trackData.artists[0].name}`)
                    music.removeClass("nomusic");

                    if (typeof callback === "function") {
                        callback()
                    }
                    img.attr("style", "");
                    music.attr("style", "")
                } else {
                    setupNoMusic("", "No music playing")
                    if (typeof callback === "function") {
                        callback()
                    }
                }
            }).error(() => {
                if (typeof callback === "function") {
                    callback()
                }
            });
        }

        function reset(time) {
            setTimeout(function() {
                clear()
                $("#name").val("")
                $("#feel").val("")
                $("#emoji").val("")
                $("#formContainer").attr("")
                $("form").attr("style", "")
                hints.html("&nbsp;")
                hints.attr("style", "")
                action.attr("style", "opacity: 0;");
                title.attr("style", "opacity: 1;");
                zoomOutMobile();
            }, time)
        }

        function resetUpdateTrack(time) {
            setTimeout(function() {
                updateTrackData(()=> {
                    clear()
                    $("#name").val("")
                    $("#feel").val("")
                    $("#emoji").val("")
                    $("#formContainer").attr("")
                    $("form").attr("style", "")
                    hints.html("&nbsp;")
                    hints.attr("style", "")
                    action.attr("style", "opacity: 0;");
                    title.attr("style", "opacity: 1;");
                });
            }, time)
        }

        function transitionOut() {
            $("#formContainer").attr("style","max-height: 0;");
            music.attr("style", "opacity: 0;")
            $("form").attr("style", "opacity: 0;");
            hints.attr("style", "opacity: 0;");
            action.attr("style", "opacity: 1;");
            title.attr("style", "opacity: 0;");
        }

        function updateText(msg) {
            action.attr("style", "opacity: 0;")
            message(msg)
            resetUpdateTrack(2500)
        }

        function submitForm(ev) {
            ev.preventDefault();
            clear();
            transitionOut()

            let name=$("#name").val(),
                    feel=$("#feel").val(),
                    emoji=$("#emoji").val();

            if (name === "") {
                name = "Erick"
            }

            let  maxTry = 0;
            let intFn = setInterval(function() {
                if (maxTry >= 8) {
                    clearInterval(intFn);
                    updateText("No service")
                } else {
                    maxTry += 1;
                    loading()
                }
            }, 1000);

            $.post("/log",{ feel: feel, name: name, emoji: emoji, test: isTest }, function(data){
                setTimeout(function() {
                    clearInterval(intFn);
                    if(data === 'CREATED!') {
                        updateText("Data point saved")
                    } else {
                        updateText("No point saved")
                    }
                }, 2300)
            });
        }

        $("input").keyup(function(ev) {
            setTimeout(function() {
                if ($("#feel").val().length > 0 || $("#emoji").val().length > 0) {
                    hints.text("Press Enter to send");
                    if (ev.keyCode === 13 || ev.which === 13) {
                        submitForm(ev)
                    }
                } else {
                    hints.html("&nbsp;")
                }
            }, 500);
        });

        $("form").submit(function(ev) { submitForm(ev) });


        function initMusicIntervalFn() {
            if (spotifyBtn === true) {
                return;
            }
            trackInfoUpdateNum = setInterval(() => {
                if (numTrackUpdates > 10) {
                    clearInterval(trackInfoUpdateNum);
                    // window.location.refresh()
                }
                updateTrackData( () => {
                    numTrackUpdates += 1
                })
            }, 5000)
        }

        function setupNoMusic(mus, url) {
            music.addClass("nomusic");
            music.html(`<img style="opacity: 0;" src="${mus}"><h3>${url}</h3>`);
            music.attr("style", "");
        }

        // Business Logic start

        function startApp() {
            reset(0);

            var url = new URL(window.location.href);
            var isTest = url.searchParams.get("test");

            if (authd !== "" && !spotifyBtn) {
                hints.text(`${authd} has been authorized!`);
                hints.attr("style", "opacity: 1;");
                setTimeout(() => {
                    hints.attr("style", "opacity: 0;");
                }, 2000);
            }

            if (error !== "") {
                music.append(`<h3>${error}</h3>`);
                music.attr("style", "");
            } else if (spotifyBtn === true) {
                auth.attr("style", "");
            } else if (currentMusic === "No music playing") {
                setupNoMusic(musicImgUrl, currentMusic)
            } else if (currentMusic !== "") {
                music.append(`<img src="${musicImgUrl}"><h3>${currentMusic}</h3>`);
                music.attr("style", "");
            }
            initMusicIntervalFn()
        }

        startApp();
    });
</script>
